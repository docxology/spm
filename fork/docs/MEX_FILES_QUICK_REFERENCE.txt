╔══════════════════════════════════════════════════════════════════════════╗
║                    MEX FILES - QUICK REFERENCE GUIDE                     ║
╚══════════════════════════════════════════════════════════════════════════╝

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Q1: What exactly are .mexw64, .mexa64, .mexmaca64, .mexmaci64 files?
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
A: They are compiled C/C++ functions for MATLAB, specific to each platform:
   
   File Extension    Platform                           Architecture
   ─────────────────────────────────────────────────────────────────
   .mexw64          Windows 64-bit                      Intel x86-64
   .mexa64          Linux 64-bit                        Intel x86-64
   .mexmaca64       macOS Apple Silicon                 ARM (M1/M2/M3)
   .mexmaci64       macOS Intel                         Intel x86-64

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Q2: Are they necessary? Can I delete them?
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
A: **NO - DO NOT DELETE**
   
   • ESSENTIAL for SPM operation
   • Performance-critical algorithms
   • Cannot be replaced with pure MATLAB
   • Deleting causes severe functionality loss (50-500x slowdown)
   • Many operations will not work without them

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Q3: How many MEX files are there?
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
A: 72 files total (but only 18 unique functions):
   
   18 functions × 4 architectures = 72 binary files
   
   Each function compiled for:
   ✓ Windows 64-bit (.mexw64)
   ✓ Linux 64-bit (.mexa64)
   ✓ macOS Apple Silicon (.mexmaca64)
   ✓ macOS Intel (.mexmaci64)

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Q4: Where are they currently located?
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
A: At the root level: /spm/
   
   Example files:
   /spm/spm_cat.mexw64
   /spm/spm_cat.mexa64
   /spm/spm_cat.mexmaca64
   /spm/spm_cat.mexmaci64
   /spm/spm_diffeo.mexw64
   ...and so on for all 18 functions

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Q5: Where should they be located (after reorganization)?
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
A: In their respective module directories alongside .m files:
   
   Example reorganization:
   /spm/core/array/spm_cat.mexw64
   /spm/core/array/spm_cat.mexa64
   /spm/core/array/spm_cat.mexmaca64
   /spm/core/array/spm_cat.mexmaci64
   
   /spm/imaging/smoothing/spm_bsplinc.mexw64
   /spm/imaging/smoothing/spm_bsplinc.mexa64
   ...and so on

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Q6: How are these files generated?
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
A: From C/C++ source code through compilation:
   
   Step 1: C/C++ source files in /src directory
           Example: src/spm_cat.c
   
   Step 2: MATLAB MEX compiler compiles the code
           Command: mex spm_cat.c
   
   Step 3: Platform-specific C compiler invoked
           (MSVC on Windows, GCC/Clang on Linux/macOS)
   
   Step 4: Linked with libraries (BLAS, LAPACK)
   
   Step 5: Output .mex* binary for that platform

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Q7: What do I need to compile MEX files myself?
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
A: Required tools:
   
   ✓ MATLAB (with MEX compiler)
   ✓ C/C++ compiler:
     - Windows: Visual Studio Community Edition
     - Linux: GCC or Clang
     - macOS: Xcode Command Line Tools (xcode-select --install)
   ✓ GNU Make
   ✓ Optionally: BLAS/LAPACK for optimization

   Build command:
   cd src/
   make distclean
   make

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Q8: What are the 18 MEX functions used for?
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
A: Performance-critical operations:
   
   IMAGES & VOLUMES (7):
   - spm_sample_vol - Extract voxel values at coordinates
   - spm_slice_vol - Get 2D slices from 3D volumes
   - spm_render_vol - Generate visualizations
   - spm_conv_vol - 3D convolution (smoothing)
   - spm_global - Compute volume statistics
   - spm_resels_vol - Resolution elements
   - spm_brainwarp - Deform brain images
   
   INTERPOLATION (2):
   - spm_bsplinc - B-spline preparation
   - spm_bsplins - B-spline interpolation
   
   MESHES (5):
   - spm_mesh_dist - Distance on surface
   - spm_mesh_geodesic - Shortest path on surface
   - spm_mesh_reduce - Simplify mesh
   - spm_mesh_utils - Mesh operations
   - spm_mesh_ray_triangle - Ray-surface intersection
   
   ADVANCED (5):
   - spm_diffeo - Image registration
   - spm_field - Field manipulation
   - spm_mrf - Markov Random Fields
   - spm_bwlabel - Connected components
   - spm_dilate_erode - Morphological operations
   
   STATISTICS (4):
   - spm_hist/hist2 - Fast histograms
   - spm_voronoi - Voronoi diagrams
   - spm_project - Projection
   - spm_gmmlib - Gaussian Mixtures
   
   UTILITIES (6):
   - spm_existfile - File checking
   - spm_unlink - Fast deletion
   - spm_cat - Array concatenation
   - spm_gamrnd - Random numbers
   - spm_get_lm - Landmarks
   - spm_krutil - Kernel utilities
   - spm_jsonread - JSON parsing

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Q9: What's the performance difference?
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
A: MASSIVE differences:
   
   Operation              | Pure MATLAB Time | With MEX Time | Speedup
   ─────────────────────────────────────────────────────────────────
   Image processing      | 20 seconds       | 0.1 seconds   | 200x
   Mesh distance calc    | 100 seconds      | 3 seconds     | 33x
   3D convolution        | 500 seconds      | 1 second      | 500x
   Volume rendering      | 50 seconds       | 0.5 seconds   | 100x
   
   Bottom line: MEX files are CRITICAL for practical performance

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Q10: Do I need all 4 architecture variants?
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
A: Depends on your use case:
   
   Distribution: YES - Include all 4 for maximum compatibility
   Personal use: Include only for your current OS/architecture
   
   Current distribution includes:
   ✓ Windows 64-bit (.mexw64)
   ✓ Linux 64-bit (.mexa64)
   ✓ macOS Apple Silicon (.mexmaca64)
   ✓ macOS Intel (.mexmaci64)
   
   MATLAB automatically selects correct variant for your platform

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Q11: Why can't we use pure MATLAB instead?
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
A: Several critical limitations:
   
   ✗ MATLAB loops are slow for complex algorithms
   ✗ Memory overhead for large arrays
   ✗ No direct memory access
   ✗ Cannot do low-level bit operations
   ✗ Cannot parallelize efficiently
   ✗ Cannot achieve professional-grade performance
   
   Result: Some operations become impractical (hours instead of seconds)

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Q12: How does MATLAB find and use MEX files?
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
A: Automatic path resolution:
   
   1. User types: result = spm_cat(array1, array2);
   
   2. MATLAB searches for "spm_cat":
      a) Look in current directory
      b) Look in addpath() directories (in order)
      c) Look in MATLAB default paths
      d) On EACH platform, select correct .mex variant:
         - Windows → uses .mexw64
         - Linux → uses .mexa64
         - Mac Apple → uses .mexmaca64
         - Mac Intel → uses .mexmaci64
   
   3. Execute the compiled function
   
   CRITICAL: .m wrapper and .mex* binary must be in SAME directory

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Q13: When should I recompile MEX files?
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
A: Recompile when:
   
   ✓ Updating MATLAB to new major version
   ✓ Changing to different operating system
   ✓ Switching compiler/toolchain
   ✓ Modifying C/C++ source code
   ✓ Supporting new architecture (e.g., Apple Silicon)
   
   You DON'T need to recompile when:
   ✗ Installing SPM on same platform
   ✗ Creating new analysis
   ✗ Modifying MATLAB .m files

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Q14: What's the organization issue?
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
A: Current problem:
   
   Root directory has 72 MEX files mixed with everything else
   Makes directory cluttered and hard to navigate
   Violates the new SPM25 modular organization principle
   
   Solution in progress:
   Move MEX files to their respective module directories
   Example: spm_cat.mex* → core/array/spm_cat.mex*

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Q15: Will moving MEX files break anything?
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
A: No - if done correctly:
   
   ✓ Move .mex* files alongside their .m wrapper
   ✓ MATLAB finds them automatically through path
   ✓ spm_setup() adds modules to path
   ✓ Full backward compatibility maintained
   
   Key requirement: .m and .mex* files must stay together

╔══════════════════════════════════════════════════════════════════════════╗
║ BOTTOM LINE: MEX files are compiled C/C++ functions essential for SPM's  ║
║ performance. They should be organized with their .m wrappers in module   ║
║ directories. Never delete them - they cannot be replaced with pure MATLAB║
╚══════════════════════════════════════════════════════════════════════════╝
